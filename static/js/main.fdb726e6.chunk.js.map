{"version":3,"sources":["sounds/success.mp3","sounds/fail.mp3","LetterRow.tsx","Round.tsx","WordRound.tsx","DictateRound.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","LetterType","State","letterTypeToColor","type","Faded","Correct","Highlight","WordRow","word","Box","display","flexDirection","map","letter","index","key","paddingRight","Paper","elevation","width","height","textAlign","fontSize","color","undefined","char","abc","split","WordRound","rate","blind","targetWord","sayWord","commonErrorWord","onSuccess","onFail","ref","React","useRef","useState","buffer","setBuffer","position","length","useEffect","msg","SpeechSynthesisUtterance","lang","window","speechSynthesis","speak","cancel","current","filter","forEach","physicalKeyboard","handleHighlightKeyUp","code","handleHighlightKeyDown","onKey","includes","p","addEventListener","removeEventListener","highlightPosition","findIndex","targetChar","targetIndex","alignItems","margin","paddingTop","paddingX","alignSelf","keyboardRef","r","onChange","onKeyPress","successFx","require","failFx","stateMachine","Machine","id","initial","Blind","context","states","Play","on","success","fail","Fail","Success","after","200","target","actions","1000","Round","words","multiply","onResult","output","i","push","originalArray","array","j","Math","floor","random","temp","shuffleArray","wordsForGame","reduce","w","console","log","failedAttempts","result","setResult","useSound","playSuccess","playFail","useMachine","state","value","send","setI","lastError","setLastError","failWith","style","backgroundColor","jabber","Jabber","WordType","createSetOfNumbers","count","Array","_","Word","createWord","join","n","NumbersDoubleAndTriple","newNumber","Numbers","createRandomNumber","DictateRound","replace","demoWords","toLocaleLowerCase","typeMap","letters","Letters","numbers","numbersDT","AlphaNumeric","Boolean","location","hostname","match","ReactDOM","render","dictateSet","setDictateSet","playing","setPlaying","setRate","setLength","dictate","setDictate","setWords","results","setResults","sorted","Object","entries","sort","a","b","trim","top","bottom","left","right","justifyContent","m","TextareaAutosize","e","toLocaleString","Button","onClick","Slider","event","newValue","defaultValue","aria-labelledby","valueLabelDisplay","step","min","max","FormControl","component","FormLabel","RadioGroup","aria-label","name","FormControlLabel","control","Radio","label","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fdb726e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/success.a8e58690.mp3\";","module.exports = __webpack_public_path__ + \"static/media/fail.23730a41.mp3\";","import React from \"react\";\nimport { Box, Paper } from \"@material-ui/core\";\n\nexport enum LetterType {\n  Faded,\n  Correct,\n  Highlight,\n}\n\ntype Letter = {\n  char: string;\n  type: LetterType;\n};\n\ntype WordRowProps = {\n  word: (Letter | undefined)[];\n};\n\nconst letterTypeToColor = (type: LetterType | undefined) => {\n  switch (type) {\n    case LetterType.Faded:\n      return \"#eee\";\n    case LetterType.Correct:\n      return \"green\";\n    case LetterType.Highlight:\n      return \"brown\";\n    default:\n      return \"#eee\";\n  }\n};\n\nexport const WordRow = ({ word }: WordRowProps) => {\n  return (\n    <Box display=\"flex\" flexDirection=\"row\">\n      {word.map((letter, index) => {\n        return (\n          <Box key={index} paddingRight=\"20px\">\n            <Paper elevation={3}>\n              <Box\n                width=\"70px\"\n                height=\"90px\"\n                textAlign=\"center\"\n                fontSize=\"70px\"\n                color={letterTypeToColor(letter ? letter.type : undefined)}\n              >\n                {letter ? letter.char : \"_\"}\n              </Box>\n            </Paper>\n          </Box>\n        );\n      })}\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Machine } from 'xstate';\nimport { useMachine } from '@xstate/react';\nimport \"react-simple-keyboard/build/css/index.css\";\nimport { Box } from \"@material-ui/core\";\nimport { WordRound } from './WordRound';\nimport useSound from \"use-sound\";\nconst successFx = require('./sounds/success.mp3');\nconst failFx = require('./sounds/fail.mp3');\n\nenum State {\n  Success = 'SUCCESS',\n  Fail = 'FAIL',\n  Play  = 'PLAY',\n  Blind  = 'BLIND'\n}\n\nexport interface StateSchema {\n    states: {\n        [State.Play]: {\n          states: {\n            [State.Fail]: {},\n            [State.Blind]: {},\n          }\n        },\n        [State.Blind]: {\n          states: {\n            [State.Fail]: {},\n            [State.Success]: {},\n          }\n        },\n        [State.Fail]: {\n          states: {\n            [State.Play]: {},\n          }\n        };\n        [State.Success]: {\n          states: {\n            [State.Play]: {},\n          }\n        };\n    };\n}\n\nexport type StateEvent =\n    | { type: 'success' }\n    | { type: 'fail' };\n\nexport const stateMachine = Machine<\n    {},\n    StateSchema,\n    StateEvent\n>({\n    id: 'success',\n    initial: State.Blind,\n    context: {\n    },\n    states: {\n        [State.Play]: {\n            on: {\n                success: State.Blind,\n                fail: State.Fail,\n            },\n        },\n        [State.Blind]: {\n          on: {\n              success: State.Success,\n              fail: State.Fail,\n          },\n      },\n        [State.Fail]: {\n            after: {\n                200: {\n                    target: State.Play,\n                    actions: [],\n                },\n            },\n        },\n        [State.Success]: {\n            after: {\n                1000: State.Blind,\n            },\n        },\n    },\n});\n\nfunction shuffleArray<T>(originalArray: T[]): T[] {\n  const array = originalArray;\n  for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n  }\n  return array;\n}\n\nexport type RoundProps = {\n  words: string[];\n  multiply: number;\n  onResult:  (result: Record<string, { failedAttempts: number }>) => void;\n}\n\nexport const Round = ({words, multiply, onResult}: RoundProps) => {\n  const [wordsForGame] = React.useState(() => {\n    const output: string[] = [];\n    for (let i = 0; i < multiply; i++) {\n      output.push(...words);\n    }\n    return shuffleArray(output);\n  })\n  const [result, setResult] = React.useState(() => words.reduce((p, w: string) => { \n    console.log('re-reduce');\n    p[w] = { failedAttempts: 0 };\n    return p;\n  }, {} as Record<string, { failedAttempts: number; }>));\n\n  const [playSuccess] = useSound(successFx);\n  const [playFail] = useSound(failFx);\n\n  const [{ value: state }, send] = useMachine(stateMachine);\n  const [i, setI] = React.useState(0);\n  const [lastError, setLastError] = React.useState<string | undefined>(undefined);\n  const word = wordsForGame[i % wordsForGame.length];\n\n  React.useEffect(() => {\n    if (i === wordsForGame.length) {\n      onResult(result);\n    }\n  }, [result, i, onResult, wordsForGame]);\n\n  if (state === State.Play) {\n    return <WordRound \n      key='play'\n      blind={false}\n      targetWord={word}\n      commonErrorWord={lastError}\n      onSuccess={() => {\n        send({\n          type: 'success'\n        });\n        playSuccess();\n      }}\n      onFail={(failWith) => {\n        setResult(r => {\n          r[word].failedAttempts++; \n          return r;\n        })\n        setLastError(failWith)\n        send({\n          type: 'fail'\n        })\n        playFail();\n      }}\n    />\n  } else if (state === State.Blind) {\n    return <WordRound\n      key='blind' \n      blind={true}\n      targetWord={word}\n      onSuccess={() => {\n        send({\n          type: 'success'\n        });\n        playSuccess();\n        setI(i => i + 1);\n      }}\n      onFail={(failWith) => {\n        setResult(r => {\n          r[word].failedAttempts++; \n          return r;\n        })\n        setLastError(failWith)\n        send({\n          type: 'fail'\n        })\n        playFail();\n      }}\n    />\n  } else if (state === State.Success) {\n    return <Box position=\"fixed\" width=\"100%\" height=\"100%\" style={{backgroundColor: 'green'}} />;\n  } else {\n    return <Box position=\"fixed\" width=\"100%\" height=\"100%\" style={{backgroundColor: 'red'}} />;\n  }\n};\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport Keyboard from \"react-simple-keyboard\";\nimport \"react-simple-keyboard/build/css/index.css\";\nimport { WordRow, LetterType } from \"./LetterRow\";\n\nconst abc = \"abcdefghijklmnopqrstuvwxyz0123456789\".split(\"\");\n\ntype WordRoundProps = {\n  rate?: number;\n  blind: boolean;\n  targetWord: string;\n  sayWord?: string;\n  commonErrorWord?: string;\n  onSuccess: () => void;\n  onFail: (failWith: string) => void;\n};\n\nexport const WordRound = ({\n  rate,\n  blind,\n  targetWord,\n  sayWord,\n  commonErrorWord,\n  onSuccess,\n  onFail,\n}: WordRoundProps) => {\n  const ref = React.useRef<any>();\n  \n  const [buffer, setBuffer] = React.useState('');\n  const position = buffer.length;\n\n  React.useEffect(() => {\n    const msg = new SpeechSynthesisUtterance(sayWord || targetWord);\n    //msg.voice = speechSynthesis.getVoices().find(voice => voice.name.includes(\"English\"))!;\n    if (rate) {\n      msg.rate = rate;\n    }\n    msg.lang = 'en-UK';\n    window.speechSynthesis.speak(msg);\n    return () => window.speechSynthesis.cancel();\n  }, [rate, sayWord, targetWord]);\n\n  React.useEffect(() => {\n    const key = targetWord.split(\"\")[position];\n    if (ref.current) {\n      abc\n        .filter((char) => char !== key)\n        .forEach((char) =>\n          ref.current.physicalKeyboard.handleHighlightKeyUp({\n            key: char,\n            code: \"key\",\n          })\n        );\n      ref.current.physicalKeyboard.handleHighlightKeyDown({\n        key,\n        code: \"key\",\n      });\n    }\n  }, [position, targetWord, sayWord, rate]);\n\n  React.useEffect(() => {\n    const onKey = ({ key }: any) => {\n      if (abc.includes(key)) {\n        const targetKey = targetWord.split(\"\")[position];\n        if (targetKey === key) {\n          if (position === targetWord.length - 1) {\n            onSuccess();\n          } else {\n            setBuffer((p) => p + key);\n          }\n        } else {\n          onFail(buffer + key);\n        }\n      }\n    };\n    window.addEventListener(\"keyup\", onKey);\n    return () => {\n      window.removeEventListener(\"keyup\", onKey);\n    };\n  }, [onFail, onSuccess, position, targetWord, setBuffer, buffer]);\n\n  const highlightPosition = !commonErrorWord ? undefined : targetWord.split('').findIndex((targetChar, targetIndex) => commonErrorWord.split('')[targetIndex] !== targetChar);\n\n\n  return (\n    <Box\n      position=\"absolute\"\n      width=\"100%\"\n      height=\"100%\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n    >\n      <Box display=\"flex\" flexDirection=\"row\" margin=\"10px\">\n        <WordRow\n          word={targetWord.split(\"\").map((char, index) => {\n            if (!blind && highlightPosition !== undefined && index === highlightPosition && index >= position) {\n              return {\n                char,\n                type: LetterType.Highlight,\n              };\n            } else if (blind && !(index < position)) {\n              return undefined;\n            } else {\n              return {\n                char,\n                type: (index < position ? LetterType.Correct : LetterType.Faded),\n              };\n            }\n          })}\n        />\n      </Box>\n      {!blind && (\n        <Box paddingTop=\"80px\" paddingX=\"80px\" alignSelf=\"stretch\">\n          <Keyboard\n            keyboardRef={(r) => {\n              ref.current = r;\n            }}\n            onChange={() => {}}\n            onKeyPress={() => {}}\n          />\n        </Box>\n      )}\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Machine } from 'xstate';\nimport { useMachine } from '@xstate/react';\nimport \"react-simple-keyboard/build/css/index.css\";\nimport { Box } from \"@material-ui/core\";\nimport { WordRound } from './WordRound';\nimport useSound from \"use-sound\";\n// @ts-ignore\nimport Jabber from 'jabber';\nconst jabber = new Jabber();\n\nconst successFx = require('./sounds/success.mp3');\nconst failFx = require('./sounds/fail.mp3');\n\nenum State {\n  Success = 'SUCCESS',\n  Fail = 'FAIL',\n  Play  = 'PLAY',\n}\n\ninterface StateSchema {\n    states: {\n        [State.Play]: {\n          states: {\n            [State.Fail]: {},\n          }\n        },\n        [State.Fail]: {\n          states: {\n            [State.Play]: {},\n          }\n        };\n        [State.Success]: {\n          states: {\n            [State.Play]: {},\n          }\n        };\n    };\n}\n\nexport type StateEvent =\n    | { type: 'success' }\n    | { type: 'fail' };\n\nexport const stateMachine = Machine<\n    {},\n    StateSchema,\n    StateEvent\n>({\n    id: 'success',\n    initial: State.Play,\n    context: {\n    },\n    states: {\n        [State.Play]: {\n            on: {\n                success: State.Play,\n                fail: State.Fail,\n            },\n        },\n        [State.Fail]: {\n            after: {\n                200: {\n                    target: State.Play,\n                    actions: [],\n                },\n            },\n        },\n        [State.Success]: {\n            after: {\n                1000: State.Play,\n            },\n        },\n    },\n});\n\nexport enum WordType {\n  Letters = \"abcdefghijklmnopqrstuvwxyz\",\n  Numbers = \"0123456789\",\n  NumbersDoubleAndTriple = \"0123456789DT\",\n  AlphaNumeric = \"abcdefghijklmnopqrstuvwxyz0123456789\",\n  Word = \"word\",\n}\n\nconst createRandomNumber = (type: string, length: number) => [...new Array(length)].map(i => (Math.floor(Math.random() * type.length)) ).map(n => {\n  const letter = type[n];\n  if (type === WordType.NumbersDoubleAndTriple && (letter === 'D' || letter === 'T')) {\n    const newNumber = WordType.Numbers[Math.floor(Math.random() * WordType.Numbers.length)];\n    return `${letter === 'D' ? 'double' : 'triple'} ${newNumber}`;\n  }\n  return letter;\n}).join('. ');\nconst createSetOfNumbers = (type: WordType, length: number, count: number)  => [...new Array(count)].map(_ => type === WordType.Word ? jabber.createWord(length).split('').join('. ') : createRandomNumber(type, length));\n\nexport type DictateRoundProps = {\n  length: number;\n  rate: number;\n  type: WordType;\n}\n\nexport const DictateRound = ({ length, rate, type }: DictateRoundProps) => {\n  const [words] = React.useState(createSetOfNumbers(type, length, 100));\n  const [i, setI] = React.useState(0);\n  const word = words[i % words.length];\n\n  const target = word.replace(/double (\\d)/g, '$1$1').replace(/triple (\\d)/g, '$1$1$1').replace(/\\s/g, \"\").replace(/\\./g, '').replace(/,/g, '');\n  const sayWord = word;\n\n  // console.log(target);\n  // console.log(sayWord);\n\n  const [playSuccess] = useSound(successFx);\n  const [playFail] = useSound(failFx);\n\n  const [{ value: state }, send] = useMachine(stateMachine);\n\n  if (state === State.Play) {\n    return <WordRound\n      key={i} \n      blind={true}\n      rate={rate}\n      targetWord={target}\n      sayWord={`It is ${sayWord}`}\n      onSuccess={() => {\n        send({\n          type: 'success'\n        });\n        playSuccess();\n        setI(i => i + 1);\n      }}\n      onFail={(failWith) => {\n        if (failWith.length > 1)\n          console.log(`${word}\\n${failWith} <-- error`)\n        send({\n          type: 'fail'\n        })\n        playFail();\n        setI(i => i + 1);\n      }}\n    />\n  } else if (state === State.Success) {\n    return <Box position=\"fixed\" width=\"100%\" height=\"100%\" style={{backgroundColor: 'green'}} />;\n  } else {\n    return <Box position=\"fixed\" width=\"100%\" height=\"100%\" style={{backgroundColor: 'red'}} />;\n  }\n};\n","import React from \"react\";\nimport \"react-simple-keyboard/build/css/index.css\";\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  Radio,\n  RadioGroup,\n  TextareaAutosize,\n} from \"@material-ui/core\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { Round } from \"./Round\";\nimport { DictateRound, WordType } from \"./DictateRound\";\n\nconst demoWords = [\n  \"beautiful\",\n  \"didactic\",\n  \"esteem\",\n  \"Unfortunately\",\n  \"curiosity\",\n  \"believe\",\n  \"Interesting\",\n  \"quickly\",\n  \"processor\",\n  \"Rabbit\",\n  \"cancelled\",\n  \"inspiration\",\n  \"Possibly\",\n  \"especially\",\n  \"improvement\",\n  \"existing\",\n  \"happening\",\n  \"allowed\",\n  \"behavior\",\n  \"crucial\",\n  \"Existing\",\n  \"stretch\",\n  \"shuffle\",\n].map((w) => w.toLocaleLowerCase());\n\nconst typeMap = {\n  letters: WordType.Letters,\n  numbers: WordType.Numbers,\n  numbersDT: WordType.NumbersDoubleAndTriple,\n  \"alpha-numeric\": WordType.AlphaNumeric,\n  word: WordType.Word,\n};\n\nexport const App = () => {\n  const [dictateSet, setDictateSet] = React.useState<\n    \"letters\" | \"numbers\" | \"alpha-numeric\"\n  >(\"letters\");\n  const [playing, setPlaying] = React.useState(false);\n  const [rate, setRate] = React.useState(1);\n  const [length, setLength] = React.useState(6);\n  const [dictate, setDictate] = React.useState(false);\n  const [words, setWords] = React.useState(demoWords);\n  const [results, setResults] = React.useState<\n    undefined | { word: string; failedAttempts: number }[]\n  >(undefined);\n  if (dictate) {\n    return (\n      <DictateRound length={length} rate={rate} type={typeMap[dictateSet]} />\n    );\n  }\n  if (playing) {\n    return (\n      <Round\n        onResult={(result) => {\n          console.log(result);\n          const sorted = Object.entries(result)\n            .sort((a, b) => b[1].failedAttempts - a[1].failedAttempts)\n            .map((w) => ({ word: w[0], failedAttempts: w[1].failedAttempts }));\n          setResults(sorted);\n          const array = sorted.map((w) => w.word);\n          setWords(array);\n          setPlaying(false);\n        }}\n        multiply={3}\n        words={words\n          .filter((w) => w.length > 0)\n          .map((w) => w.toLocaleLowerCase())\n          .map((w) => w.trim())}\n      />\n    );\n  } else {\n    return (\n      <Box\n        position=\"absolute\"\n        top=\"10px\"\n        bottom=\"10px\"\n        left=\"10px\"\n        right=\"10px\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-around\"\n      >\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"top\">\n          <Box m=\"10px\" fontSize=\"25px\">Practice spelling:</Box>\n          {results &&\n            results.map((r, i) => {\n              return (\n                <Box key={i}>\n                  {r.failedAttempts} - {r.word}\n                </Box>\n              );\n            })}\n          <TextareaAutosize\n            value={words.join(\"\\n\")}\n            onChange={(e) => {\n              if (e.target && e.target.value) {\n                const value = e.target.value;\n                setWords(value.toLocaleString().split(\"\\n\"));\n                console.log(value);\n              }\n            }}\n          />\n          <Button onClick={() => setPlaying(true)}>Start</Button>\n        </Box>\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n          <Box m=\"10px\" fontSize=\"25px\">Practice writing down when dictated:</Box>\n          <Box width=\"200px\">\n            Speech Rate: {rate}\n            <Slider\n              value={rate}\n              onChange={(event, newValue) => setRate(newValue as number)}\n              defaultValue={1}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"auto\"\n              step={0.1}\n              min={0.3}\n              max={2}\n            />\n          </Box>\n          <Box width=\"200px\">\n            Length: {length}\n            <Slider\n              value={length}\n              onChange={(event, newValue) => setLength(newValue as number)}\n              defaultValue={6}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"auto\"\n              step={1}\n              min={3}\n              max={15}\n            />\n          </Box>\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">Type</FormLabel>\n            <RadioGroup\n              aria-label=\"gender\"\n              name=\"gender1\"\n              value={dictateSet}\n              onChange={(e, value) => setDictateSet(() => value as any)}\n            >\n              <FormControlLabel\n                value=\"letters\"\n                control={<Radio />}\n                label=\"letters\"\n              />\n              <FormControlLabel\n                value=\"numbers\"\n                control={<Radio />}\n                label=\"numbers\"\n              />\n              <FormControlLabel\n                value=\"numbersDT\"\n                control={<Radio />}\n                label=\"numbers + double + triple\"\n              />\n              <FormControlLabel\n                value=\"alpha-numeric\"\n                control={<Radio />}\n                label=\"alpha-numeric\"\n              />\n              <FormControlLabel\n                value=\"word\"\n                control={<Radio />}\n                label=\"word (lorem ipsum)\"\n              />\n            </RadioGroup>\n          </FormControl>\n          <Button onClick={() => setDictate(true)}>Start</Button>\n        </Box>\n      </Box>\n    );\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}