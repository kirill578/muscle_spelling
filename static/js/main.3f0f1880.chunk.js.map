{"version":3,"sources":["sounds/success.mp3","sounds/fail.mp3","LetterRow.tsx","Round.tsx","WordRound.tsx","DictateRound.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","LetterType","State","letterTypeToColor","type","Faded","Correct","Highlight","WordRow","word","Box","display","flexDirection","map","letter","index","key","paddingRight","Paper","elevation","width","height","textAlign","fontSize","color","undefined","char","abc","split","WordRound","rate","blind","targetWord","sayWord","commonErrorWord","onSuccess","onFail","ref","React","useRef","useState","buffer","setBuffer","position","length","useEffect","msg","SpeechSynthesisUtterance","lang","window","speechSynthesis","speak","current","filter","forEach","physicalKeyboard","handleHighlightKeyUp","code","handleHighlightKeyDown","onKey","includes","p","addEventListener","removeEventListener","highlightPosition","findIndex","targetChar","targetIndex","alignItems","paddingTop","paddingX","alignSelf","keyboardRef","r","onChange","onKeyPress","successFx","require","failFx","stateMachine","Machine","id","initial","Blind","context","states","Play","on","success","fail","Fail","Success","after","200","target","actions","1000","Round","words","multiply","onResult","output","i","push","originalArray","array","j","Math","floor","random","temp","shuffleArray","wordsForGame","reduce","w","console","log","failedAttempts","result","setResult","useSound","playSuccess","playFail","useMachine","state","value","send","setI","lastError","setLastError","failWith","style","backgroundColor","WordType","createSetOfNumbers","count","Array","_","n","join","createRandomNumber","DictateRound","replace","demoWords","toLocaleLowerCase","typeMap","Letters","Numbers","AlphaNumeric","Boolean","location","hostname","match","ReactDOM","render","dictateSet","setDictateSet","playing","setPlaying","setRate","setLength","dictate","setDictate","setWords","results","setResults","sorted","Object","entries","sort","a","b","trim","top","bottom","left","right","TextareaAutosize","e","toLocaleString","Button","onClick","Slider","event","newValue","defaultValue","aria-labelledby","valueLabelDisplay","step","min","max","FormControl","component","FormLabel","RadioGroup","aria-label","name","FormControlLabel","control","Radio","label","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f0f1880.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/success.a8e58690.mp3\";","module.exports = __webpack_public_path__ + \"static/media/fail.23730a41.mp3\";","import React from \"react\";\nimport { Box, Paper } from \"@material-ui/core\";\n\nexport enum LetterType {\n  Faded,\n  Correct,\n  Highlight,\n}\n\ntype Letter = {\n  char: string;\n  type: LetterType;\n};\n\ntype WordRowProps = {\n  word: (Letter | undefined)[];\n};\n\nconst letterTypeToColor = (type: LetterType | undefined) => {\n  switch (type) {\n    case LetterType.Faded:\n      return \"#eee\";\n    case LetterType.Correct:\n      return \"green\";\n    case LetterType.Highlight:\n      return \"brown\";\n    default:\n      return \"#eee\";\n  }\n};\n\nexport const WordRow = ({ word }: WordRowProps) => {\n  return (\n    <Box display=\"flex\" flexDirection=\"row\">\n      {word.map((letter, index) => {\n        return (\n          <Box key={index} paddingRight=\"20px\">\n            <Paper elevation={3}>\n              <Box\n                width=\"70px\"\n                height=\"90px\"\n                textAlign=\"center\"\n                fontSize=\"70px\"\n                color={letterTypeToColor(letter ? letter.type : undefined)}\n              >\n                {letter ? letter.char : \"_\"}\n              </Box>\n            </Paper>\n          </Box>\n        );\n      })}\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Machine } from 'xstate';\nimport { useMachine } from '@xstate/react';\nimport \"react-simple-keyboard/build/css/index.css\";\nimport { Box } from \"@material-ui/core\";\nimport { WordRound } from './WordRound';\nimport useSound from \"use-sound\";\nconst successFx = require('./sounds/success.mp3');\nconst failFx = require('./sounds/fail.mp3');\n\nenum State {\n  Success = 'SUCCESS',\n  Fail = 'FAIL',\n  Play  = 'PLAY',\n  Blind  = 'BLIND'\n}\n\nexport interface StateSchema {\n    states: {\n        [State.Play]: {\n          states: {\n            [State.Fail]: {},\n            [State.Blind]: {},\n          }\n        },\n        [State.Blind]: {\n          states: {\n            [State.Fail]: {},\n            [State.Success]: {},\n          }\n        },\n        [State.Fail]: {\n          states: {\n            [State.Play]: {},\n          }\n        };\n        [State.Success]: {\n          states: {\n            [State.Play]: {},\n          }\n        };\n    };\n}\n\nexport type StateEvent =\n    | { type: 'success' }\n    | { type: 'fail' };\n\nexport const stateMachine = Machine<\n    {},\n    StateSchema,\n    StateEvent\n>({\n    id: 'success',\n    initial: State.Blind,\n    context: {\n    },\n    states: {\n        [State.Play]: {\n            on: {\n                success: State.Blind,\n                fail: State.Fail,\n            },\n        },\n        [State.Blind]: {\n          on: {\n              success: State.Success,\n              fail: State.Fail,\n          },\n      },\n        [State.Fail]: {\n            after: {\n                200: {\n                    target: State.Play,\n                    actions: [],\n                },\n            },\n        },\n        [State.Success]: {\n            after: {\n                1000: State.Blind,\n            },\n        },\n    },\n});\n\nfunction shuffleArray<T>(originalArray: T[]): T[] {\n  const array = originalArray;\n  for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n  }\n  return array;\n}\n\nexport type RoundProps = {\n  words: string[];\n  multiply: number;\n  onResult:  (result: Record<string, { failedAttempts: number }>) => void;\n}\n\nexport const Round = ({words, multiply, onResult}: RoundProps) => {\n  const [wordsForGame] = React.useState(() => {\n    const output: string[] = [];\n    for (let i = 0; i < multiply; i++) {\n      output.push(...words);\n    }\n    return shuffleArray(output);\n  })\n  const [result, setResult] = React.useState(() => words.reduce((p, w: string) => { \n    console.log('re-reduce');\n    p[w] = { failedAttempts: 0 };\n    return p;\n  }, {} as Record<string, { failedAttempts: number; }>));\n\n  const [playSuccess] = useSound(successFx);\n  const [playFail] = useSound(failFx);\n\n  const [{ value: state }, send] = useMachine(stateMachine);\n  const [i, setI] = React.useState(0);\n  const [lastError, setLastError] = React.useState<string | undefined>(undefined);\n  const word = wordsForGame[i % wordsForGame.length];\n\n  React.useEffect(() => {\n    if (i === wordsForGame.length) {\n      onResult(result);\n    }\n  }, [result, i, onResult, wordsForGame]);\n\n  if (state === State.Play) {\n    return <WordRound \n      key='play'\n      blind={false}\n      targetWord={word}\n      commonErrorWord={lastError}\n      onSuccess={() => {\n        send({\n          type: 'success'\n        });\n        playSuccess();\n      }}\n      onFail={(failWith) => {\n        setResult(r => {\n          r[word].failedAttempts++; \n          return r;\n        })\n        setLastError(failWith)\n        send({\n          type: 'fail'\n        })\n        playFail();\n      }}\n    />\n  } else if (state === State.Blind) {\n    return <WordRound\n      key='blind' \n      blind={true}\n      targetWord={word}\n      onSuccess={() => {\n        send({\n          type: 'success'\n        });\n        playSuccess();\n        setI(i => i + 1);\n      }}\n      onFail={(failWith) => {\n        setResult(r => {\n          r[word].failedAttempts++; \n          return r;\n        })\n        setLastError(failWith)\n        send({\n          type: 'fail'\n        })\n        playFail();\n      }}\n    />\n  } else if (state === State.Success) {\n    return <Box position=\"fixed\" width=\"100%\" height=\"100%\" style={{backgroundColor: 'green'}} />;\n  } else {\n    return <Box position=\"fixed\" width=\"100%\" height=\"100%\" style={{backgroundColor: 'red'}} />;\n  }\n};\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport Keyboard from \"react-simple-keyboard\";\nimport \"react-simple-keyboard/build/css/index.css\";\nimport { WordRow, LetterType } from \"./LetterRow\";\n\nconst abc = \"abcdefghijklmnopqrstuvwxyz0123456789\".split(\"\");\n\ntype WordRoundProps = {\n  rate?: number;\n  blind: boolean;\n  targetWord: string;\n  sayWord?: string;\n  commonErrorWord?: string;\n  onSuccess: () => void;\n  onFail: (failWith: string) => void;\n};\n\nexport const WordRound = ({\n  rate,\n  blind,\n  targetWord,\n  sayWord,\n  commonErrorWord,\n  onSuccess,\n  onFail,\n}: WordRoundProps) => {\n  const ref = React.useRef<any>();\n  \n  const [buffer, setBuffer] = React.useState('');\n  const position = buffer.length;\n\n  React.useEffect(() => {\n    if (position === 0) {\n      var msg = new SpeechSynthesisUtterance(sayWord || targetWord);\n      if (rate) {\n        msg.rate = rate;\n      }\n      msg.lang = 'en-UK';\n      window.speechSynthesis.speak(msg);\n    }\n    const key = targetWord.split(\"\")[position];\n    if (ref.current) {\n      abc\n        .filter((char) => char !== key)\n        .forEach((char) =>\n          ref.current.physicalKeyboard.handleHighlightKeyUp({\n            key: char,\n            code: \"key\",\n          })\n        );\n      ref.current.physicalKeyboard.handleHighlightKeyDown({\n        key,\n        code: \"key\",\n      });\n    }\n  }, [position, targetWord, sayWord, rate]);\n\n  React.useEffect(() => {\n    const onKey = ({ key }: any) => {\n      if (abc.includes(key)) {\n        const targetKey = targetWord.split(\"\")[position];\n        if (targetKey === key) {\n          if (position === targetWord.length - 1) {\n            onSuccess();\n          } else {\n            setBuffer((p) => p + key);\n          }\n        } else {\n          onFail(buffer + key);\n        }\n      }\n    };\n    window.addEventListener(\"keyup\", onKey);\n    return () => {\n      window.removeEventListener(\"keyup\", onKey);\n    };\n  }, [onFail, onSuccess, position, targetWord, setBuffer, buffer]);\n\n  const highlightPosition = !commonErrorWord ? undefined : targetWord.split('').findIndex((targetChar, targetIndex) => commonErrorWord.split('')[targetIndex] !== targetChar);\n\n\n  return (\n    <Box\n      position=\"absolute\"\n      width=\"100%\"\n      height=\"100%\"\n      p=\"10px\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n    >\n      <Box display=\"flex\" flexDirection=\"row\">\n        <WordRow\n          word={targetWord.split(\"\").map((char, index) => {\n            if (!blind && highlightPosition !== undefined && index === highlightPosition && index >= position) {\n              return {\n                char,\n                type: LetterType.Highlight,\n              };\n            } else if (blind && !(index < position)) {\n              return undefined;\n            } else {\n              return {\n                char,\n                type: (index < position ? LetterType.Correct : LetterType.Faded),\n              };\n            }\n          })}\n        />\n      </Box>\n      {!blind && (\n        <Box paddingTop=\"80px\" paddingX=\"80px\" alignSelf=\"stretch\">\n          <Keyboard\n            keyboardRef={(r) => {\n              ref.current = r;\n            }}\n            onChange={() => {}}\n            onKeyPress={() => {}}\n          />\n        </Box>\n      )}\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Machine } from 'xstate';\nimport { useMachine } from '@xstate/react';\nimport \"react-simple-keyboard/build/css/index.css\";\nimport { Box } from \"@material-ui/core\";\nimport { WordRound } from './WordRound';\nimport useSound from \"use-sound\";\nconst successFx = require('./sounds/success.mp3');\nconst failFx = require('./sounds/fail.mp3');\n\nenum State {\n  Success = 'SUCCESS',\n  Fail = 'FAIL',\n  Play  = 'PLAY',\n}\n\ninterface StateSchema {\n    states: {\n        [State.Play]: {\n          states: {\n            [State.Fail]: {},\n          }\n        },\n        [State.Fail]: {\n          states: {\n            [State.Play]: {},\n          }\n        };\n        [State.Success]: {\n          states: {\n            [State.Play]: {},\n          }\n        };\n    };\n}\n\nexport type StateEvent =\n    | { type: 'success' }\n    | { type: 'fail' };\n\nexport const stateMachine = Machine<\n    {},\n    StateSchema,\n    StateEvent\n>({\n    id: 'success',\n    initial: State.Play,\n    context: {\n    },\n    states: {\n        [State.Play]: {\n            on: {\n                success: State.Play,\n                fail: State.Fail,\n            },\n        },\n        [State.Fail]: {\n            after: {\n                200: {\n                    target: State.Play,\n                    actions: [],\n                },\n            },\n        },\n        [State.Success]: {\n            after: {\n                1000: State.Play,\n            },\n        },\n    },\n});\n\nexport enum WordType {\n  Letters = \"abcdefghijklmnopqrstuvwxyz\",\n  Numbers = \"0123456789\",\n  AlphaNumeric = \"abcdefghijklmnopqrstuvwxyz0123456789\"\n}\n\nconst createRandomNumber = (type: string, length: number) => [...new Array(length)].map(i => (Math.floor(Math.random() * type.length)) ).map(n => `${type[n]}`).join(' ');\nconst createSetOfNumbers = (type: WordType, length: number, count: number)  => [...new Array(count)].map(_ => createRandomNumber(type, length));\n\nexport type DictateRoundProps = {\n  length: number;\n  rate: number;\n  type: WordType;\n}\n\nexport const DictateRound = ({ length, rate, type }: DictateRoundProps) => {\n  const [words] = React.useState(createSetOfNumbers(type, length, 100));\n  const [i, setI] = React.useState(0);\n  const word = words[i % words.length];\n\n  const [playSuccess] = useSound(successFx);\n  const [playFail] = useSound(failFx);\n\n  const [{ value: state }, send] = useMachine(stateMachine);\n\n  if (state === State.Play) {\n    return <WordRound\n      key={i} \n      blind={true}\n      rate={rate}\n      targetWord={word.replace(/\\s/g, \"\")}\n      sayWord={word}\n      onSuccess={() => {\n        send({\n          type: 'success'\n        });\n        playSuccess();\n        setI(i => i + 1);\n      }}\n      onFail={(failWith) => {\n        if (failWith.length > 1)\n          console.log(`${word}\\n${failWith} <-- error`)\n        send({\n          type: 'fail'\n        })\n        playFail();\n        setI(i => i + 1);\n      }}\n    />\n  } else if (state === State.Success) {\n    return <Box position=\"fixed\" width=\"100%\" height=\"100%\" style={{backgroundColor: 'green'}} />;\n  } else {\n    return <Box position=\"fixed\" width=\"100%\" height=\"100%\" style={{backgroundColor: 'red'}} />;\n  }\n};\n","import React from \"react\";\nimport \"react-simple-keyboard/build/css/index.css\";\nimport { Box, Button, FormControl, FormControlLabel, FormLabel, Radio, RadioGroup, TextareaAutosize } from \"@material-ui/core\";\nimport Slider from '@material-ui/core/Slider';\nimport { Round } from './Round';\nimport { DictateRound, WordType } from './DictateRound';\n\nconst demoWords = [\n  \"beautiful\",\n  \"didactic\",\n  \"esteem\",\n  \"Unfortunately\",\n  \"curiosity\",\n  \"believe\",\n  \"Interesting\",\n  \"quickly\",\n  \"processor\",\n  \"Rabbit\",\n  \"cancelled\",\n  \"inspiration\",\n  \"Possibly\",\n  \"especially\",\n  \"improvement\",\n  \"existing\",\n  \"happening\",\n  \"allowed\",\n  \"behavior\",\n  \"crucial\",\n  \"Existing\",\n  \"stretch\",\n  'shuffle'\n].map(w => w.toLocaleLowerCase());\n\n\nconst typeMap = {\n  'letters': WordType.Letters,\n  'numbers': WordType.Numbers,\n  'alpha-numeric': WordType.AlphaNumeric,\n}\n\nexport const App = () => {\n  const [dictateSet, setDictateSet] =  React.useState<'letters' | 'numbers' | 'alpha-numeric'>('letters');\n  const [playing, setPlaying] =  React.useState(false);\n  const [rate, setRate] =  React.useState(1);\n  const [length, setLength] =  React.useState(6);\n  const [dictate, setDictate] =  React.useState(false);\n  const [words, setWords] = React.useState(demoWords);\n  const [results, setResults] = React.useState<undefined | ({ word: string; failedAttempts: number}[])>(undefined);\n  if (dictate) {\n    return <DictateRound length={length} rate={rate} type={typeMap[dictateSet]} />;\n  }\n  if (playing) {\n    return (<Round \n      onResult={(result) => {\n        console.log(result);\n        const sorted = Object.entries(result).sort((a, b) => b[1].failedAttempts - a[1].failedAttempts).map(w => ({ word: w[0], failedAttempts: w[1].failedAttempts}));\n        setResults(sorted);\n        const array = sorted.map(w => w.word);\n        setWords(array);\n        setPlaying(false);\n      }}\n      multiply={3}\n      words={words.filter(w => w.length > 0).map(w => w.toLocaleLowerCase()).map(w => w.trim())}\n    />);\n  } else {\n    return (<Box\n      position=\"absolute\"\n      top=\"10px\"\n      bottom=\"10px\"\n      left=\"10px\"\n      right=\"10px\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n    > \n      {results && results.map((r, i) => {\n        return <Box key={i}>{r.failedAttempts} - {r.word}</Box>\n      })}\n      <TextareaAutosize value={words.join('\\n')} onChange={(e) => {\n        if (e.target && e.target.value) {\n          const value = e.target.value;\n          setWords(value.toLocaleString().split('\\n'));\n          console.log(value)\n        }\n      }} />\n      <Button onClick={() => setPlaying(true)}>Start</Button>\n      <Box width=\"200px\">\n        Speech Rate:\n        <Slider\n          value={rate}\n          onChange={(event, newValue) => setRate(newValue as number)}\n          defaultValue={1}\n          aria-labelledby=\"discrete-slider\"\n          valueLabelDisplay=\"auto\"\n          step={0.1}\n          min={0.3}\n          max={2}\n        />\n      </Box>\n      <Box width=\"200px\">\n        Length:\n        <Slider\n          value={length}\n          onChange={(event, newValue) => setLength(newValue as number)}\n          defaultValue={6}\n          aria-labelledby=\"discrete-slider\"\n          valueLabelDisplay=\"auto\"\n          step={1}\n          min={3}\n          max={15}\n        />\n      </Box>\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\">Type</FormLabel>\n        <RadioGroup aria-label=\"gender\" name=\"gender1\" value={dictateSet} onChange={(e, value) => setDictateSet(() => value as any)}>\n          <FormControlLabel value=\"letters\" control={<Radio />} label=\"letters\" />\n          <FormControlLabel value=\"numbers\" control={<Radio />} label=\"numbers\" />\n          <FormControlLabel value=\"alpha-numeric\" control={<Radio />} label=\"alpha-numeric\" />\n        </RadioGroup>\n      </FormControl>\n      <Button onClick={() => setDictate(true)}>Start Dictate</Button>\n    </Box>);\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}