{"version":3,"sources":["sounds/success.mp3","sounds/fail.mp3","App.tsx","WordRound.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","State","abc","split","WordRound","blind","targetWord","onSuccess","onFail","ref","React","useRef","useState","position","setPosition","useEffect","current","key","filter","char","forEach","physicalKeyboard","handleHighlightKeyUp","code","handleHighlightKeyDown","onKey","includes","length","p","window","addEventListener","removeEventListener","Box","width","height","display","flexDirection","alignItems","map","index","paddingRight","Paper","elevation","textAlign","fontSize","color","paddingTop","paddingX","alignSelf","keyboardRef","r","onChange","onKeyPress","successFx","require","failFx","words","w","toLocaleLowerCase","stateMachine","Machine","id","initial","Play","context","states","on","success","Blind","fail","Fail","Success","after","200","target","actions","1000","wordsForGame","originalArray","array","i","j","Math","floor","random","temp","shuffleArray","Boolean","location","hostname","match","ReactDOM","render","useSound","playSuccess","playFail","useMachine","state","value","send","setI","word","type","style","backgroundColor","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.096cc50a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/success.a8e58690.mp3\";","module.exports = __webpack_public_path__ + \"static/media/fail.23730a41.mp3\";","import React from \"react\";\nimport { Machine } from 'xstate';\nimport { useMachine } from '@xstate/react';\nimport \"react-simple-keyboard/build/css/index.css\";\nimport { Box } from \"@material-ui/core\";\nimport { WordRound } from './WordRound';\nimport useSound from \"use-sound\";\nconst successFx = require('./sounds/success.mp3');\nconst failFx = require('./sounds/fail.mp3');\n\nconst words = [\n  \"didactic\",\n  \"esteem\",\n  \"Unfortunately\",\n  \"curiosity\",\n  \"believe\",\n  \"Unfortunately\",\n  \"Interesting\",\n  \"quickly\",\n  \"processor\",\n  \"Rabbit\",\n  \"cancelled\",\n  \"inspiration\",\n  \"Possibly\",\n  \"especially\",\n  \"improvement\",\n  \"existing\",\n  \"happening\",\n  \"allowed\",\n  \"behavior\",\n  \"crucial\",\n  \"Existing\",\n  \"stretch\",\n  'shuffle'\n].map(w => w.toLocaleLowerCase());\n\n\nenum State {\n  Success = 'SUCCESS',\n  Fail = 'FAIL',\n  Play  = 'PLAY',\n  Blind  = 'BLIND'\n}\n\nexport interface StateSchema {\n    states: {\n        [State.Play]: {\n          states: {\n            [State.Fail]: {},\n            [State.Blind]: {},\n          }\n        },\n        [State.Blind]: {\n          states: {\n            [State.Fail]: {},\n            [State.Success]: {},\n          }\n        },\n        [State.Fail]: {\n          states: {\n            [State.Play]: {},\n          }\n        };\n        [State.Success]: {\n          states: {\n            [State.Play]: {},\n          }\n        };\n    };\n}\n\nexport type StateEvent =\n    | { type: 'success' }\n    | { type: 'fail' };\n\nexport const stateMachine = Machine<\n    {},\n    StateSchema,\n    StateEvent\n>({\n    id: 'success',\n    initial: State.Play,\n    context: {\n    },\n    states: {\n        [State.Play]: {\n            on: {\n                success: State.Blind,\n                fail: State.Fail,\n            },\n        },\n        [State.Blind]: {\n          on: {\n              success: State.Success,\n              fail: State.Fail,\n          },\n      },\n        [State.Fail]: {\n            after: {\n                200: {\n                    target: State.Play,\n                    actions: [],\n                },\n            },\n        },\n        [State.Success]: {\n            after: {\n                1000: State.Play,\n            },\n        },\n    },\n});\n\nfunction shuffleArray<T>(originalArray: T[]): T[] {\n  const array = originalArray;\n  for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n  }\n  return array;\n}\n\nconst wordsForGame = shuffleArray(words);\n\nexport const App = () => {\n  const [playSuccess] = useSound(successFx);\n  const [playFail] = useSound(failFx);\n\n  const [{ value: state }, send] = useMachine(stateMachine);\n  const [i, setI] = React.useState(0);\n  const word = wordsForGame[i % wordsForGame.length];\n  if (state === State.Play) {\n    return <WordRound \n      key='play'\n      blind={false}\n      targetWord={word}\n      onSuccess={() => {\n        send({\n          type: 'success'\n        });\n        playSuccess();\n      }}\n      onFail={() => {\n        send({\n          type: 'fail'\n        })\n        playFail();\n      }}\n    />\n  } else if (state === State.Blind) {\n    return <WordRound\n      key='blind' \n      blind={true}\n      targetWord={word}\n      onSuccess={() => {\n        send({\n          type: 'success'\n        });\n        playSuccess();\n        setI(i => i + 1);\n      }}\n      onFail={() => {\n        send({\n          type: 'fail'\n        })\n        playFail();\n      }}\n    />\n  } else if (state === State.Success) {\n    return <Box position=\"fixed\" width=\"100%\" height=\"100%\" style={{backgroundColor: 'green'}} />;\n  } else {\n    return <Box position=\"fixed\" width=\"100%\" height=\"100%\" style={{backgroundColor: 'red'}} />;\n  }\n};\n","import React from \"react\";\nimport { Box, Button, Paper } from \"@material-ui/core\";\nimport Keyboard from \"react-simple-keyboard\";\nimport \"react-simple-keyboard/build/css/index.css\";\n\nconst abc = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n\ntype WordRoundProps = {\n  blind: boolean;\n  targetWord: string;\n  onSuccess: () => void;\n  onFail: () => void;\n}\n\nexport const WordRound = ({blind, targetWord, onSuccess, onFail}: WordRoundProps) => {\n  const ref = React.useRef<any>();\n  const [position, setPosition] = React.useState(0);\n\n  React.useEffect(() => {\n    if (ref.current) {\n      const key = targetWord.split('')[position];\n      abc\n        .filter((char) => char !== key)\n        .forEach((char) =>\n          ref.current.physicalKeyboard.handleHighlightKeyUp({\n            key: char,\n            code: \"key\",\n          })\n        );\n      ref.current.physicalKeyboard.handleHighlightKeyDown({\n        key,\n        code: \"key\",\n      });\n    }\n  }, [position, targetWord]);\n\n  React.useEffect(() => {\n    const onKey = ({ key }: any) => {\n      if (abc.includes(key)) {\n        const targetKey = targetWord.split('')[position];\n        if (targetKey === key) {\n          if (position === targetWord.length - 1) {\n            onSuccess();\n          } else {\n            setPosition(p => p + 1);\n          }\n        } else {\n          onFail();\n        }\n      }\n    };\n    window.addEventListener(\"keyup\", onKey);\n    return () => {\n      window.removeEventListener(\"keyup\", onKey);\n    };\n  }, [onFail, onSuccess, position, targetWord, setPosition]);\n\n  return (\n    <Box position=\"absolute\" width=\"100%\" height=\"100%\" p=\"10px\" display=\"flex\" flexDirection=\"column\" alignItems=\"center\" >\n      <Box display=\"flex\" flexDirection=\"row\">\n        {targetWord.split(\"\").map((char, index) => {\n          return (\n            <Box key={index} paddingRight=\"20px\">\n              <Paper elevation={3}>\n                <Box\n                  width=\"70px\"\n                  height=\"90px\"\n                  textAlign=\"center\"\n                  fontSize=\"70px\"\n                  color={index < position ? 'green' : '#eee'}\n                >\n                  {(blind && !(index < position)) ? '_' : char}\n                </Box>\n              </Paper>\n            </Box>\n          );\n        })}\n      </Box>\n      <Box paddingTop=\"80px\" paddingX=\"80px\" alignSelf=\"stretch\">\n        <Keyboard\n          keyboardRef={(r) => {\n            ref.current = r;\n          }}\n          onChange={() => {}}\n          onKeyPress={() => {}}\n        />\n      </Box>\n    </Box>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}