{"version":3,"sources":["sounds/success.mp3","sounds/fail.mp3","LetterRow.tsx","Round.tsx","speech.tsx","WordRound.tsx","DictateRound.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","LetterType","State","letterTypeToColor","type","Faded","Correct","Highlight","WordRow","word","Box","display","flexDirection","map","letter","index","key","paddingRight","Paper","elevation","width","height","textAlign","fontSize","lineHeight","color","undefined","char","SpeechContext","React","createContext","abc","split","WordRound","rate","blind","targetWord","sayWord","commonErrorWord","onSuccess","onFail","ref","useRef","useState","buffer","setBuffer","position","length","speechLang","useContext","useEffect","msg","SpeechSynthesisUtterance","voice","speechSynthesis","getVoices","find","name","includes","lang","window","speak","cancel","current","filter","forEach","physicalKeyboard","handleHighlightKeyUp","code","handleHighlightKeyDown","onKey","gtag","eventLabel","p","addEventListener","removeEventListener","highlightPosition","findIndex","targetChar","targetIndex","alignItems","margin","paddingTop","paddingX","alignSelf","keyboardRef","r","onChange","onKeyPress","successFx","require","failFx","stateMachine","Machine","id","initial","Blind","context","states","Play","on","success","fail","Fail","Success","after","200","target","actions","1000","Round","words","multiply","onResult","output","i","push","originalArray","array","j","Math","floor","random","temp","shuffleArray","wordsForGame","reduce","w","console","log","failedAttempts","result","setResult","useSound","playSuccess","playFail","useMachine","state","value","send","setI","lastError","setLastError","failWith","style","backgroundColor","jabber","Jabber","WordType","createSetOfNumbers","count","Array","_","Word","createWord","join","n","NumbersDoubleAndTriple","newNumber","Numbers","createRandomNumber","DictateRound","replace","demoWords","toLocaleLowerCase","typeMap","letters","Letters","numbers","numbersDT","AlphaNumeric","Boolean","location","hostname","match","ReactDOM","render","dictateSet","setDictateSet","playing","setPlaying","setRate","setLength","dictate","setDictate","setWords","results","setResults","voices","setVoices","a","Promise","resolve","reject","synth","setInterval","clearInterval","x","setLang","Provider","sorted","Object","entries","sort","b","trim","top","bottom","left","right","justifyContent","m","TextareaAutosize","e","toLocaleString","Button","onClick","Slider","event","newValue","defaultValue","aria-labelledby","valueLabelDisplay","step","min","max","FormControl","component","FormLabel","RadioGroup","aria-label","FormControlLabel","control","Radio","label","Select","MenuItem","disabled","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64f57701.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/success.a8e58690.mp3\";","module.exports = __webpack_public_path__ + \"static/media/fail.23730a41.mp3\";","import React from \"react\";\nimport { Box, Paper } from \"@material-ui/core\";\n\nexport enum LetterType {\n  Faded,\n  Correct,\n  Highlight,\n}\n\ntype Letter = {\n  char: string;\n  type: LetterType;\n};\n\ntype WordRowProps = {\n  word: (Letter | undefined)[];\n};\n\nconst letterTypeToColor = (type: LetterType | undefined) => {\n  switch (type) {\n    case LetterType.Faded:\n      return \"#eee\";\n    case LetterType.Correct:\n      return \"green\";\n    case LetterType.Highlight:\n      return \"brown\";\n    default:\n      return \"#eee\";\n  }\n};\n\nexport const WordRow = ({ word }: WordRowProps) => {\n  return (\n    <Box display=\"flex\" flexDirection=\"row\">\n      {word.map((letter, index) => {\n        return (\n          <Box key={index} paddingRight=\"7px\">\n            <Paper elevation={3}>\n              <Box\n                width=\"35px\"\n                height=\"55px\"\n                textAlign=\"center\"\n                fontSize=\"45px\"\n                lineHeight=\"1\"\n                color={letterTypeToColor(letter ? letter.type : undefined)}\n              >\n                {letter ? letter.char : \"_\"}\n              </Box>\n            </Paper>\n          </Box>\n        );\n      })}\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Machine } from 'xstate';\nimport { useMachine } from '@xstate/react';\nimport \"react-simple-keyboard/build/css/index.css\";\nimport { Box } from \"@material-ui/core\";\nimport { WordRound } from './WordRound';\nimport useSound from \"use-sound\";\nconst successFx = require('./sounds/success.mp3');\nconst failFx = require('./sounds/fail.mp3');\n\nenum State {\n  Success = 'SUCCESS',\n  Fail = 'FAIL',\n  Play  = 'PLAY',\n  Blind  = 'BLIND'\n}\n\nexport interface StateSchema {\n    states: {\n        [State.Play]: {\n          states: {\n            [State.Fail]: {},\n            [State.Blind]: {},\n          }\n        },\n        [State.Blind]: {\n          states: {\n            [State.Fail]: {},\n            [State.Success]: {},\n          }\n        },\n        [State.Fail]: {\n          states: {\n            [State.Play]: {},\n          }\n        };\n        [State.Success]: {\n          states: {\n            [State.Play]: {},\n          }\n        };\n    };\n}\n\nexport type StateEvent =\n    | { type: 'success' }\n    | { type: 'fail' };\n\nexport const stateMachine = Machine<\n    {},\n    StateSchema,\n    StateEvent\n>({\n    id: 'success',\n    initial: State.Blind,\n    context: {\n    },\n    states: {\n        [State.Play]: {\n            on: {\n                success: State.Blind,\n                fail: State.Fail,\n            },\n        },\n        [State.Blind]: {\n          on: {\n              success: State.Success,\n              fail: State.Fail,\n          },\n      },\n        [State.Fail]: {\n            after: {\n                200: {\n                    target: State.Play,\n                    actions: [],\n                },\n            },\n        },\n        [State.Success]: {\n            after: {\n                1000: State.Blind,\n            },\n        },\n    },\n});\n\nfunction shuffleArray<T>(originalArray: T[]): T[] {\n  const array = originalArray;\n  for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n  }\n  return array;\n}\n\nexport type RoundProps = {\n  words: string[];\n  multiply: number;\n  onResult:  (result: Record<string, { failedAttempts: number }>) => void;\n}\n\nexport const Round = ({words, multiply, onResult}: RoundProps) => {\n  const [wordsForGame] = React.useState(() => {\n    const output: string[] = [];\n    for (let i = 0; i < multiply; i++) {\n      output.push(...words);\n    }\n    return shuffleArray(output);\n  })\n  const [result, setResult] = React.useState(() => words.reduce((p, w: string) => { \n    console.log('re-reduce');\n    p[w] = { failedAttempts: 0 };\n    return p;\n  }, {} as Record<string, { failedAttempts: number; }>));\n\n  const [playSuccess] = useSound(successFx);\n  const [playFail] = useSound(failFx);\n\n  const [{ value: state }, send] = useMachine(stateMachine);\n  const [i, setI] = React.useState(0);\n  const [lastError, setLastError] = React.useState<string | undefined>(undefined);\n  const word = wordsForGame[i % wordsForGame.length];\n\n  React.useEffect(() => {\n    if (i === wordsForGame.length) {\n      onResult(result);\n    }\n  }, [result, i, onResult, wordsForGame]);\n\n  if (state === State.Play) {\n    return <WordRound \n      key='play'\n      blind={false}\n      targetWord={word}\n      commonErrorWord={lastError}\n      onSuccess={() => {\n        send({\n          type: 'success'\n        });\n        playSuccess();\n      }}\n      onFail={(failWith) => {\n        setResult(r => {\n          r[word].failedAttempts++; \n          return r;\n        })\n        setLastError(failWith)\n        send({\n          type: 'fail'\n        })\n        playFail();\n      }}\n    />\n  } else if (state === State.Blind) {\n    return <WordRound\n      key='blind' \n      blind={true}\n      targetWord={word}\n      onSuccess={() => {\n        send({\n          type: 'success'\n        });\n        playSuccess();\n        setI(i => i + 1);\n      }}\n      onFail={(failWith) => {\n        setResult(r => {\n          r[word].failedAttempts++; \n          return r;\n        })\n        setLastError(failWith)\n        send({\n          type: 'fail'\n        })\n        playFail();\n      }}\n    />\n  } else if (state === State.Success) {\n    return <Box position=\"fixed\" width=\"100%\" height=\"100%\" style={{backgroundColor: 'green'}} />;\n  } else {\n    return <Box position=\"fixed\" width=\"100%\" height=\"100%\" style={{backgroundColor: 'red'}} />;\n  }\n};\n","import React from \"react\";\n\nexport const SpeechContext = React.createContext<string | undefined>(undefined);\n\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport Keyboard from \"react-simple-keyboard\";\nimport \"react-simple-keyboard/build/css/index.css\";\nimport { WordRow, LetterType } from \"./LetterRow\";\nimport { SpeechContext } from \"./speech\";\n\nconst abc = \"abcdefghijklmnopqrstuvwxyz0123456789\".split(\"\");\n\ntype WordRoundProps = {\n  rate?: number;\n  blind: boolean;\n  targetWord: string;\n  sayWord?: string;\n  commonErrorWord?: string;\n  onSuccess: () => void;\n  onFail: (failWith: string) => void;\n};\n\nexport const WordRound = ({\n  rate,\n  blind,\n  targetWord,\n  sayWord,\n  commonErrorWord,\n  onSuccess,\n  onFail,\n}: WordRoundProps) => {\n  const ref = React.useRef<any>();\n  \n  const [buffer, setBuffer] = React.useState('');\n  const position = buffer.length;\n\n  const speechLang = React.useContext(SpeechContext);\n  React.useEffect(() => {\n    const msg = new SpeechSynthesisUtterance(sayWord || targetWord);\n    msg.voice = speechSynthesis.getVoices().find(voice => voice.name.includes(speechLang || \"English\"))!;\n    if (rate) {\n      msg.rate = rate;\n    }\n    msg.lang = 'en-UK';\n    window.speechSynthesis.speak(msg);\n    return () => window.speechSynthesis.cancel();\n  }, [rate, sayWord, targetWord, speechLang]);\n\n  React.useEffect(() => {\n    const key = targetWord.split(\"\")[position];\n    if (ref.current) {\n      abc\n        .filter((char) => char !== key)\n        .forEach((char) =>\n          ref.current.physicalKeyboard.handleHighlightKeyUp({\n            key: char,\n            code: \"key\",\n          })\n        );\n      ref.current.physicalKeyboard.handleHighlightKeyDown({\n        key,\n        code: \"key\",\n      });\n    }\n  }, [position, targetWord, sayWord, rate]);\n\n  React.useEffect(() => {\n    const onKey = ({ key }: any) => {\n      if (abc.includes(key)) {\n        const targetKey = targetWord.split(\"\")[position];\n        if (targetKey === key) {\n          if (position === targetWord.length - 1) {\n            onSuccess();\n            (window as any).gtag('event', 'success', {eventLabel: sayWord || targetWord });\n          } else {\n            setBuffer((p) => p + key);\n          }\n        } else {\n          onFail(buffer + key);\n          (window as any).gtag('event', 'fail', {eventLabel: sayWord || targetWord });\n        }\n      }\n    };\n    window.addEventListener(\"keyup\", onKey);\n    return () => {\n      window.removeEventListener(\"keyup\", onKey);\n    };\n  }, [onFail, onSuccess, position, targetWord, setBuffer, buffer, sayWord]);\n\n  const highlightPosition = !commonErrorWord ? undefined : targetWord.split('').findIndex((targetChar, targetIndex) => commonErrorWord.split('')[targetIndex] !== targetChar);\n\n\n  return (\n    <Box\n      position=\"absolute\"\n      width=\"100%\"\n      height=\"100%\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n    >\n      <Box display=\"flex\" flexDirection=\"row\" margin=\"10px\">\n        <WordRow\n          word={targetWord.split(\"\").map((char, index) => {\n            if (!blind && highlightPosition !== undefined && index === highlightPosition && index >= position) {\n              return {\n                char,\n                type: LetterType.Highlight,\n              };\n            } else if (blind && !(index < position)) {\n              return undefined;\n            } else {\n              return {\n                char,\n                type: (index < position ? LetterType.Correct : LetterType.Faded),\n              };\n            }\n          })}\n        />\n      </Box>\n      {!blind && (\n        <Box paddingTop=\"80px\" paddingX=\"80px\" alignSelf=\"stretch\">\n          <Keyboard\n            keyboardRef={(r) => {\n              ref.current = r;\n            }}\n            onChange={() => {}}\n            onKeyPress={() => {}}\n          />\n        </Box>\n      )}\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Machine } from 'xstate';\nimport { useMachine } from '@xstate/react';\nimport \"react-simple-keyboard/build/css/index.css\";\nimport { Box } from \"@material-ui/core\";\nimport { WordRound } from './WordRound';\nimport useSound from \"use-sound\";\n// @ts-ignore\nimport Jabber from 'jabber';\nconst jabber = new Jabber();\n\nconst successFx = require('./sounds/success.mp3');\nconst failFx = require('./sounds/fail.mp3');\n\nenum State {\n  Success = 'SUCCESS',\n  Fail = 'FAIL',\n  Play  = 'PLAY',\n}\n\ninterface StateSchema {\n    states: {\n        [State.Play]: {\n          states: {\n            [State.Fail]: {},\n          }\n        },\n        [State.Fail]: {\n          states: {\n            [State.Play]: {},\n          }\n        };\n        [State.Success]: {\n          states: {\n            [State.Play]: {},\n          }\n        };\n    };\n}\n\nexport type StateEvent =\n    | { type: 'success' }\n    | { type: 'fail' };\n\nexport const stateMachine = Machine<\n    {},\n    StateSchema,\n    StateEvent\n>({\n    id: 'success',\n    initial: State.Play,\n    context: {\n    },\n    states: {\n        [State.Play]: {\n            on: {\n                success: State.Play,\n                fail: State.Fail,\n            },\n        },\n        [State.Fail]: {\n            after: {\n                200: {\n                    target: State.Play,\n                    actions: [],\n                },\n            },\n        },\n        [State.Success]: {\n            after: {\n                1000: State.Play,\n            },\n        },\n    },\n});\n\nexport enum WordType {\n  Letters = \"abcdefghijklmnopqrstuvwxyz\",\n  Numbers = \"0123456789\",\n  NumbersDoubleAndTriple = \"0123456789DT\",\n  AlphaNumeric = \"abcdefghijklmnopqrstuvwxyz0123456789\",\n  Word = \"word\",\n}\n\nconst createRandomNumber = (type: string, length: number) => [...new Array(length)].map(i => (Math.floor(Math.random() * type.length)) ).map(n => {\n  const letter = type[n];\n  if (type === WordType.NumbersDoubleAndTriple && (letter === 'D' || letter === 'T')) {\n    const newNumber = WordType.Numbers[Math.floor(Math.random() * WordType.Numbers.length)];\n    return `${letter === 'D' ? 'double' : 'triple'} ${newNumber}`;\n  }\n  return letter;\n}).join('. ');\nconst createSetOfNumbers = (type: WordType, length: number, count: number)  => [...new Array(count)].map(_ => type === WordType.Word ? jabber.createWord(length).split('').join('. ') : createRandomNumber(type, length));\n\nexport type DictateRoundProps = {\n  length: number;\n  rate: number;\n  type: WordType;\n}\n\nexport const DictateRound = ({ length, rate, type }: DictateRoundProps) => {\n  const [words] = React.useState(createSetOfNumbers(type, length, 100));\n  const [i, setI] = React.useState(0);\n  const word = words[i % words.length];\n\n  const target = word.replace(/double (\\d)/g, '$1$1').replace(/triple (\\d)/g, '$1$1$1').replace(/\\s/g, \"\").replace(/\\./g, '').replace(/,/g, '');\n  const sayWord = word;\n\n  // console.log(target);\n  // console.log(sayWord);\n\n  const [playSuccess] = useSound(successFx);\n  const [playFail] = useSound(failFx);\n\n  const [{ value: state }, send] = useMachine(stateMachine);\n\n  if (state === State.Play) {\n    return <WordRound\n      key={i} \n      blind={true}\n      rate={rate}\n      targetWord={target}\n      sayWord={`It is ${sayWord}`}\n      onSuccess={() => {\n        send({\n          type: 'success'\n        });\n        playSuccess();\n        setI(i => i + 1);\n      }}\n      onFail={(failWith) => {\n        if (failWith.length > 1)\n          console.log(`${word}\\n${failWith} <-- error`)\n        send({\n          type: 'fail'\n        })\n        playFail();\n        setI(i => i + 1);\n      }}\n    />\n  } else if (state === State.Success) {\n    return <Box position=\"fixed\" width=\"100%\" height=\"100%\" style={{backgroundColor: 'green'}} />;\n  } else {\n    return <Box position=\"fixed\" width=\"100%\" height=\"100%\" style={{backgroundColor: 'red'}} />;\n  }\n};\n","import React, { useEffect } from \"react\";\nimport \"react-simple-keyboard/build/css/index.css\";\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  Radio,\n  RadioGroup,\n  TextareaAutosize,\n} from \"@material-ui/core\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { Round } from \"./Round\";\nimport { DictateRound, WordType } from \"./DictateRound\";\n\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport { SpeechContext } from \"./speech\";\n\nconst demoWords = [\n  \"beautiful\",\n  \"didactic\",\n  \"esteem\",\n  \"Unfortunately\",\n  \"curiosity\",\n  \"believe\",\n  \"Interesting\",\n  \"quickly\",\n  \"processor\",\n  \"Rabbit\",\n  \"cancelled\",\n  \"inspiration\",\n  \"Possibly\",\n  \"especially\",\n  \"improvement\",\n  \"existing\",\n  \"happening\",\n  \"allowed\",\n  \"behavior\",\n  \"crucial\",\n  \"Existing\",\n  \"stretch\",\n  \"shuffle\",\n].map((w) => w.toLocaleLowerCase());\n\nconst typeMap = {\n  letters: WordType.Letters,\n  numbers: WordType.Numbers,\n  numbersDT: WordType.NumbersDoubleAndTriple,\n  \"alpha-numeric\": WordType.AlphaNumeric,\n  word: WordType.Word,\n};\n\nfunction getSpeech(): Promise<SpeechSynthesisVoice[]> {\n  return new Promise(\n      function (resolve, reject) {\n          let synth = window.speechSynthesis;\n          let id: NodeJS.Timeout;\n\n          id = setInterval(() => {\n              if (synth.getVoices().length !== 0) {\n                  resolve(synth.getVoices());\n                  clearInterval(id);\n              }\n          }, 10);\n      }\n  )\n}\n\nexport const App = () => {\n  const [dictateSet, setDictateSet] = React.useState<\n    \"letters\" | \"numbers\" | \"alpha-numeric\"\n  >(\"letters\");\n  const [playing, setPlaying] = React.useState(false);\n  const [rate, setRate] = React.useState(1);\n  const [length, setLength] = React.useState(6);\n  const [dictate, setDictate] = React.useState(false);\n  const [words, setWords] = React.useState(demoWords);\n  const [results, setResults] = React.useState<\n    undefined | { word: string; failedAttempts: number }[]\n  >(undefined);\n\n\n  const [voices, setVoices] = React.useState<string[]>([]);\n  useEffect(() => {\n    (async () =>  {\n      setVoices((await getSpeech()).map(voice => voice.name).filter(x => x.includes(\"\")))\n    })();\n  }, []);\n  const [voice, setLang] = React.useState<string | undefined>('Default voice');\n\n\n  if (dictate) {\n    return (\n      <SpeechContext.Provider value={voice}>\n        <DictateRound length={length} rate={rate} type={typeMap[dictateSet]} />\n      </SpeechContext.Provider>\n    );\n  }\n  if (playing) {\n    return (\n      <SpeechContext.Provider value={voice}>\n        <Round\n          onResult={(result) => {\n            console.log(result);\n            const sorted = Object.entries(result)\n              .sort((a, b) => b[1].failedAttempts - a[1].failedAttempts)\n              .map((w) => ({ word: w[0], failedAttempts: w[1].failedAttempts }));\n            setResults(sorted);\n            const array = sorted.map((w) => w.word);\n            setWords(array);\n            setPlaying(false);\n          }}\n          multiply={3}\n          words={words\n            .filter((w) => w.length > 0)\n            .map((w) => w.toLocaleLowerCase())\n            .map((w) => w.trim())}\n        />\n      </SpeechContext.Provider>\n    );\n  } else {\n    return (\n      <Box\n        position=\"absolute\"\n        top=\"10px\"\n        bottom=\"10px\"\n        left=\"10px\"\n        right=\"10px\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-around\"\n      >\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"top\">\n          <Box m=\"10px\" fontSize=\"25px\">Practice spelling:</Box>\n          {results &&\n            results.map((r, i) => {\n              return (\n                <Box key={i}>\n                  {r.failedAttempts} - {r.word}\n                </Box>\n              );\n            })}\n          <TextareaAutosize\n            value={words.join(\"\\n\")}\n            onChange={(e) => {\n              if (e.target && e.target.value) {\n                const value = e.target.value;\n                setWords(value.toLocaleString().split(\"\\n\"));\n                console.log(value);\n              }\n            }}\n          />\n          <Button onClick={() => setPlaying(true)}>Start</Button>\n        </Box>\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n          <Box m=\"10px\" fontSize=\"25px\">Practice writing down when dictated:</Box>\n          <Box width=\"200px\">\n            Speech Rate: {rate}\n            <Slider\n              value={rate}\n              onChange={(event, newValue) => setRate(newValue as number)}\n              defaultValue={1}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"auto\"\n              step={0.1}\n              min={0.3}\n              max={2}\n            />\n          </Box>\n          <Box width=\"200px\">\n            Length: {length}\n            <Slider\n              value={length}\n              onChange={(event, newValue) => setLength(newValue as number)}\n              defaultValue={6}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"auto\"\n              step={1}\n              min={3}\n              max={15}\n            />\n          </Box>\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">Type</FormLabel>\n            <RadioGroup\n              aria-label=\"gender\"\n              name=\"gender1\"\n              value={dictateSet}\n              onChange={(e, value) => setDictateSet(() => value as any)}\n            >\n              <FormControlLabel\n                value=\"letters\"\n                control={<Radio />}\n                label=\"letters\"\n              />\n              <FormControlLabel\n                value=\"numbers\"\n                control={<Radio />}\n                label=\"numbers\"\n              />\n              <FormControlLabel\n                value=\"numbersDT\"\n                control={<Radio />}\n                label=\"numbers + double + triple\"\n              />\n              <FormControlLabel\n                value=\"alpha-numeric\"\n                control={<Radio />}\n                label=\"alpha-numeric\"\n              />\n              <FormControlLabel\n                value=\"word\"\n                control={<Radio />}\n                label=\"word (lorem ipsum)\"\n              />\n            </RadioGroup>\n          </FormControl>\n          <Box>\n            <Select\n                value={voice || 'Default Voice'}\n                onChange={(x) => setLang(x.target.value as any)}\n              >\n                <MenuItem disabled value={'Default voice'}>Default Voice</MenuItem>\n                {voices.map((voice, i) => <MenuItem key={i} value={voice}>{voice}</MenuItem>)}\n            </Select>\n          </Box>\n          <Button onClick={() => setDictate(true)}>Start</Button>\n        </Box>\n      </Box>\n    );\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}